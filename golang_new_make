new와 make 모두 Go의 built-in 함수로서 특정 타입의 메모리를 변수에 할당하는 역할을 수행한다. 언뜻 보기엔 비슷한 역할을 수행하는 것 같지만 동작 방식과 목적에서 차이를 보인다.

먼저 new부터 살펴보면, 아래와 같이 특정 데이터 타입을 메모리에 할당하고 그곳을 가리키는 포인터 값을 반환한다. new 로 생성한 데이터는 해당 타입의 영 값(zero value)을 가지게 된다.

func new(Type) *Type
new는 메모리 할당 단계에서 특정 값으로 초기화 시키는 것이 불가능하다. 따라서, 만약 특정 값으로 초기화를 함께 진행하고 싶은 경우에는 아래와 같은 composite literal 방식을 주로 사용하게 된다.

// new 키워드를 사용한 경우 추가적인 초기화 작업이 필요하다
p1 := new(Person)
p1.name = "yojkim"
p1.age = 23

// 위와 같은 결과
p2 := &Person{"yojkim", 23}
p3 := &Person{
    name: "yojkim",
    age: 23,
}
Effective Go에서는 new에 대해서 추가적인 초기화 작업을 거치지 않아도 되는 경우에 유용하게 사용될 수 있을 것이라고 말한다. 아래의 경우 SyncedBuffer를 구현하기 위한 자료형인데 new를 이용하면 buffer는 빈 버퍼로 세팅되며 lock의 경우 영 값이 Unlock상태인 mutex이기 때문에 즉시 사용할 수 있다.

type SyncedBuffer struct {
    lock 	sync.Mutex
    buffer 	bytes.Buffer
}
make의 경우 slice, map, channel와 같이 반드시 추가적으로 초기화 과정을 거쳐야 하는 데이터 타입을 위해 존재한다. 또한, new와 달리 make는 해당 타입의 포인터 값이 아닌 값 그 자체를 반환한다.

func make(t Type, size ...IntegerType) Type
make 키워드는 아래와 같이 주로 사용된다.

// Slice 
// make(type, length[, capacity])
s1 := make([]int, 10)
s2 := make([]int, 10, 100) 

// Map
// make(type)
m := make(map[string]string)

// Chan
// make(chan type[, capacity])
// Unbuffered
c1 := make(chan int)
// Buffered
c2 := make(chan int, 10)
보다 깊은 이해를 위해서 추가적인 자료를 첨부한다.

Understanding Pointers and Memory Allocation

Effective Go - allocation with new

The zero value of a slice





https://medium.com/golangspec/sync-rwmutex-ca6c6c3208a0
